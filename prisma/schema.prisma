// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  phone         String?
  dateOfBirth   DateTime?
  
  // Addresses
  addresses     Address[]
  
  // Authentication
  accounts      Account[]
  sessions      Session[]
  
  // E-commerce
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String  @default("India")
  phone       String?
  isDefault   Boolean @default(false)
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String
  shortDescription String?
  price           Decimal
  compareAtPrice  Decimal?
  costPrice       Decimal?
  sku             String?  @unique
  barcode         String?
  trackQuantity   Boolean  @default(true)
  quantity        Int      @default(0)
  weightValue     Decimal?
  weightUnit      String?  @default("ml")
  
  // Perfume specific fields
  fragranceFamily String?
  topNotes        String?
  heartNotes      String?
  baseNotes       String?
  sillage         String?
  longevity       String?
  season          String?
  occasion        String?
  gender          String   @default("UNISEX")
  
  // SEO and Media
  metaTitle       String?
  metaDescription String?
  images          ProductImage[]
  
  // Status
  status          String        @default("DRAFT")
  featured        Boolean       @default(false)
  
  // Relations
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishlistItems   WishlistItem[]
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean @default(false)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([productId, url])
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  name        String
  price       Decimal
  compareAtPrice Decimal?
  sku         String?  @unique
  barcode     String?
  quantity    Int      @default(0)
  weightValue Decimal?
  weightUnit  String?  @default("ml")
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  cartItems   CartItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  content   String
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, userId])
}

model CartItem {
  id         String          @id @default(cuid())
  userId     String
  productId  String
  variantId  String?
  quantity   Int
  
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant    ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  
  @@unique([userId, productId, variantId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          String      @default("PENDING")
  
  // Pricing
  subtotal        Decimal
  taxAmount       Decimal     @default(0)
  shippingAmount  Decimal     @default(0)
  discountAmount  Decimal     @default(0)
  totalAmount     Decimal
  
  // Shipping
  shippingAddressId String?
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  shippingMethod  String?
  trackingNumber  String?
  
  // Payment
  paymentStatus   String        @default("PENDING")
  paymentMethod   String?
  stripePaymentId String?
  
  // Relations
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
}

model OrderItem {
  id         String          @id @default(cuid())
  orderId    String
  productId  String
  variantId  String?
  quantity   Int
  price      Decimal
  
  order      Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product         @relation(fields: [productId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  
  createdAt  DateTime        @default(now())
}

// Note: Using String types instead of enums for SQLite compatibility
// Possible values:
// Role: "USER", "ADMIN", "MODERATOR"
// Gender: "MALE", "FEMALE", "UNISEX"
// ProductStatus: "DRAFT", "ACTIVE", "ARCHIVED"
// OrderStatus: "PENDING", "CONFIRMED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED", "REFUNDED"
// PaymentStatus: "PENDING", "PAID", "FAILED", "REFUNDED", "PARTIALLY_REFUNDED" 